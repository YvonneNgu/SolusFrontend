Awesome! Here's a **complete step-by-step guide** to set up and use **Timber** for logging in your Android Studio Kotlin project.

---

## ✅ Step 1: Add Timber to your project

1. Open your app-level `build.gradle.kts` (Kotlin DSL) or `build.gradle` file.
2. Add the Timber dependency:

### If using Kotlin DSL (`build.gradle.kts`)

```kotlin
dependencies {
    implementation("com.jakewharton.timber:timber:5.0.1")
}
```

### If using Groovy (`build.gradle`)

```groovy
dependencies {
    implementation 'com.jakewharton.timber:timber:5.0.1'
}
```

3. Click **"Sync Now"** in Android Studio.

---

## ✅ Step 2: Initialize Timber in your Application class

1. Create a custom `Application` class if you haven’t already:

```kotlin
class MyApp : Application() {
    override fun onCreate() {
        super.onCreate()

        if (BuildConfig.DEBUG) {
            Timber.plant(Timber.DebugTree())
        }
    }
}
```

2. Update your `AndroidManifest.xml` to use this class:

```xml
<application
    android:name=".MyApp"
    ... >
```

---

## ✅ Step 3: Use Timber for logging

Anywhere you used `Log.d`, `Log.e`, `Log.i`, etc., now use Timber:

| Log Type | Old (Log)           | New (Timber)      |
| -------- | ------------------- | ----------------- |
| Debug    | `Log.d(TAG, "msg")` | `Timber.d("msg")` |
| Error    | `Log.e(TAG, "msg")` | `Timber.e("msg")` |
| Info     | `Log.i(TAG, "msg")` | `Timber.i("msg")` |
| Warning  | `Log.w(TAG, "msg")` | `Timber.w("msg")` |
| Verbose  | `Log.v(TAG, "msg")` | `Timber.v("msg")` |

### Example:

```kotlin
try {
    // Some operation
} catch (e: Exception) {
    Timber.e(e, "Something went wrong")
}
```

### With optional custom tag:

```kotlin
Timber.tag("MyCustomTag").d("This is a debug message with a custom tag")
```

---

## ✅ Step 4: Avoid Logging in Release Builds (Optional but Recommended)

To avoid logging in production, **create a custom `ReleaseTree`**:

```kotlin
class ReleaseTree : Timber.Tree() {
    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
        if (priority >= Log.ERROR) {
            // Only log ERROR and above in release
            Log.println(priority, tag, message)
            // Optionally, send to crash reporting tools like Firebase Crashlytics
        }
    }
}
```

Then in your `Application` class:

```kotlin
if (BuildConfig.DEBUG) {
    Timber.plant(Timber.DebugTree())
} else {
    Timber.plant(ReleaseTree())
}
```

---

## ✅ Bonus: Automatically get class name, method, and line number

`Timber.DebugTree` includes:

```
D/MyClass: [myMethod] line 27: Something happened
```

No need to write:

```kotlin
val TAG = "MyClass"
Log.d(TAG, "message")
```

---

## ✅ Final Tip

Clean up your codebase:

* Remove all `Log.d`, `Log.e`, etc.
* Use only `Timber` for consistent logging.

